****************************************************************************************************

gate_server

    - msg pool
    - each udp port corrensponding to a client.
    - multiple socket
        ~. 

    - threads:
        ~. main-thread
            while (true) {
                package = yc_msg_pool_pop_first();
                if (package != NULL)
                    process(package);
                else
                    mz_sleep(30);
            }

        ~. sub-thread
            


****************************************************************************************************

todo

    - pthread (done)
    - realloc (done)
    - list (done)
    - warnings (done)
    - unit-test (done)
    - utf8

****************************************************************************************************

communication between server and client

    - send package
        - save the package in cache
            - wait and recieve 'arrive notification'
                - if receive 'arrive notificication', drop the package in the cache.
            - wait timeout (80ms)
                - resend the package which is in the cache.
                    - wait for 'arrive notification'

    - recieve package
        - save the package id, send 'arrive notification'
            - if the package id is new, then process this package.

    - single small package 
            size < 3KB
                type -> type_move_player
                id   -> 391
                size -> size of data
                data -> binary data, contains information of position.

    - combination packages 
            size > 20KB, each splitted package is less than 3KB
                type -> type_big_data
                id   -> 318
                totalid -> 10
                subid-> 1 (2,3,4,...)
                size -> size of data
                data -> binary data ( which is actually a structure like following.)
                        struct big_data_file
                        {
                            type -> type_file
                            length -> 
                            data -> binary data (file content)
                        }
                            
                 
            
****************************************************************************************************

how to set socket buffer size?

    -  int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);

        ~. example:

            int sendbuff = 2048;   
            setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &sendbuff, sizeof(sendbuff));   

    - int getsockopt(int socket, int level, int option_name, void *restrict option_value, socklen_t *restrict option_len);

        ~. example:
            int buff;
            int optlen = sizeof(buff);
            getsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &buff, &optlen);   

****************************************************************************************************

check package send/receive state

    netstat -su

    - output:

        Udp:
            244 packets received
            0 packets to unknown port received.
            767 packet receive errors
            1011 packets sent
            0 receive buffer errors
            0 send buffer errors
        UdpLite:
        IpExt:
            InOctets: 216557
            OutOctets: 161299

****************************************************************************************************
yc project (yard_chat)

    - target
        ~. build a good 'reliable_udp' library.
        ~. build a good serial servers framework.

    - client functionality
        ~. single to single. 
        ~. group. 
        ~. broadcast. 

****************************************************************************************************

Project file tree

    - file tree

        /* all type using 'mz' as prefix. */

        yard_chat/
            .git/
            .gitignore
            build_all.sh

            lib/
                /* virtual connection, custom protocol id, missing package. */
                    include/
                        mz/
                            libs/
                                mz_file.h
                                mz_log.h
                                mz_memory.h
                                mz_path.h
                                mz_string.h
                            
                            mz_rudp.h
                            mz_libs.h
                    src/
                        rudp/
                            mz_rudp.c

                        libs.c

            net_package/
                include/
                    mz_package_data.h
                src/
                    mz_package_data.c

            server/
                db_server/
                    premake.lua
                    include/
                    src/

                gate_server/
                    premake.lua
                    include/
                    src/

                manager_server/
                    premake.lua
                    include/
                    src/

                game_server/
                    premake.lua
                    include/
                    src/

            client/
                premake.lua
                include/
                src/

****************************************************************************************************

MMO network thinking

    - Using pure UDP for the whole network stuff.
        ~. we don't use pure TCP, because it blocks the game loop while there's packages missing, which isn't suitable for real time game.
        ~. we don't use mixture UDP and TCP, because TCP and UDP are both based on IP protocol, they are mutual interference(互相干扰) on the low level.

    - If we use UDP, what kinds of problems we need to resolve?
        ~. Virtual Connection
                It's meaningful, we only can send/recieve packages after connected each other.

        ~. Custom Protocol ID
                Because server using UDP, that means every computer can send package to it, using this 'custom protocol id' we can do 1st level filter in the GateServer before sending to Internal-Servers(ManagerServer/NameServer/GameServer/...).

        ~. Determine connected or not
                Because UDP is connected-less, we need to find a way to verify the connection is still valid.

        ~. Package NOT in order

        ~. Package missing

        ~. Flow control
                If we don't have any flow control, then we may send too much package data which cause fill up the bandwidth, in this way it will cause package missing easily, and you will have experience about 2s+ delay.               

    - Debuging
        ~. Replay way
            #. Client
                    We can save all of packages that receive from server, and add time span for the package. When debugging we don't need to connect server anymore, just read package data from the package files that we generate just now.

            #. GameServer
                    We can save all of packages that receive from client.

